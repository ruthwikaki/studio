rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to get user's companyId and role from their user document
    // Note: For production, consider using custom claims for companyId and role for performance and security.
    // This get() call can become a bottleneck or add to read counts.
    function getUserCompanyId(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.companyId;
    }
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Helper function to check if the requesting user belongs to the resource's company
    function isUserInCompany(resourceCompanyId) {
      return isSignedIn() && getUserCompanyId(request.auth.uid) == resourceCompanyId;
    }

    // Helper function to check if user has a specific role in their company
    function userHasRole(role) {
      return isSignedIn() && getUserRole(request.auth.uid) == role;
    }
    function userHasOneOfRoles(roles) {
      return isSignedIn() && getUserRole(request.auth.uid) in roles;
    }

    // Companies: Users can read their own company doc. Only owners might update (simplified).
    match /companies/{companyId} {
      allow read: if isSignedIn() && request.auth.uid == resource.data.ownerId || isUserInCompany(companyId);
      allow create: if isSignedIn(); // Anyone signed in can create a company (during registration)
      allow update: if isSignedIn() && request.auth.uid == resource.data.ownerId; // Only owner can update
      // allow delete: // Generally, don't allow company deletion via client.
    }

    // Users: Users can read/update their own user document.
    // Company owners/admins might be able to read other users in their company.
    match /users/{userId} {
      allow read, update: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn(); // Typically created during registration server-side.
      // To allow owners/admins to read users in their company:
      // allow read: if isSignedIn() && (request.auth.uid == userId || 
      //                  (isUserInCompany(resource.data.companyId) && userHasOneOfRoles(['owner', 'admin'])));
    }
    
    // Generic rule for collections that have a `companyId` field
    // This rule applies to: products, inventory, suppliers, orders, sales_history, forecasts, documents, chat_sessions
    match /{collection}/{docId} {
      // Allow read if user is part of the document's company
      allow read: if isUserInCompany(resource.data.companyId);
      
      // Allow create if user is part of the company they are creating the document for
      // and has a role that can create (e.g., owner, admin, manager).
      // Assumes request.resource.data.companyId is present on create.
      allow create: if isSignedIn() && 
                      getUserCompanyId(request.auth.uid) == request.resource.data.companyId &&
                      userHasOneOfRoles(['owner', 'admin', 'manager']);
                      
      // Allow update if user is part of the document's company
      // and has a role that can update.
      allow update: if isUserInCompany(resource.data.companyId) &&
                      userHasOneOfRoles(['owner', 'admin', 'manager']);
                      
      // Allow delete if user is part of the document's company
      // and has a role that can delete (e.g., owner, admin).
      allow delete: if isUserInCompany(resource.data.companyId) &&
                      userHasOneOfRoles(['owner', 'admin']);
    }

    // Example: Specific rules for 'orders' if needed, overriding the generic one.
    // match /orders/{orderId} {
    //   allow read, write: if isUserInCompany(resource.data.companyId);
    //   // Add more granular control if needed, e.g., only managers can approve.
    //   allow update: if isUserInCompany(resource.data.companyId) && 
    //                   (userHasRole('manager') || (/* specific fields for specific roles */ false) );
    // }
  }
}

    